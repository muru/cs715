diff -u -r gcc-spim-diff/gcc/config/spim/spim.c gcc-4.8.2/gcc/config/spim/spim.c
--- gcc-spim-diff/gcc/config/spim/spim.c	2014-03-26 06:49:41.448029573 +0530
+++ gcc-4.8.2/gcc/config/spim/spim.c	2014-03-26 06:39:07.803113355 +0530
@@ -22,11 +22,15 @@
 #include "toplev.h"
 #include "basic-block.h"
 #include "ggc.h"
+#include "dbxout.h"
 #include "target.h"
 #include "target-def.h"
+//#include "targhooks.h"
 #include "langhooks.h"
 #include "cgraph.h"
 #include "gimple.h"
+#include "df.h"
+#include "rtl.h"
 
 #define IITB_YES 1
 #define IITB_NO 0
@@ -130,19 +134,21 @@
 #undef TARGET_FUNCTION_ARG_ADVANCE
 #define TARGET_FUNCTION_ARG_ADVANCE spim_function_arg_advance
 
-static void spim_function_arg_advance(cumulative_args_t *cum_v, enum machine_mode mode,
+static void spim_function_arg_advance(cumulative_args_t cum_v, enum machine_mode mode,
 	const_tree type, bool named){
-	cum_v++;
+//  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
+//	cum += 1;
+	//cum_v.p++;
 }
 
-static int spim_function_arg(cumulative_args_t cum_v, enum machine_mode mode,
+rtx_def* spim_function_arg(cumulative_args_t cum_v, enum machine_mode mode,
 	const_tree type, bool named){
 	return NULL;
 }
 
 
 void
-spim_asm_internal_label(FILE *stream, const char *prefix, unsigned int labelno)
+spim_asm_internal_label(FILE *stream, const char *prefix, long unsigned int labelno)
 {
 	fprintf(stream,"%s%d:",prefix,labelno);
 	return;
@@ -582,12 +588,12 @@
 }
 
 void
-asm_generate_internal_label(char *STRING,char *PREFIX,int NUM)
+asm_generate_internal_label(char *STRING,const char *PREFIX,int NUM)
 {
         sprintf(STRING,"%s%d", PREFIX,NUM);
 }
 void
-asm_output_local(FILE *STREAM,char *NAME,int SIZE,int ROUNDED)
+asm_output_local(FILE *STREAM,const char *NAME,int SIZE,int ROUNDED)
 {
         fprintf(STREAM,"\t.reserve ");
         assemble_name (STREAM, NAME);
@@ -595,7 +601,7 @@
 }
 
 void
-asm_output_common(FILE *STREAM,char *NAME,int SIZE,int ROUNDED)
+asm_output_common(FILE *STREAM,const char *NAME,int SIZE,int ROUNDED)
 {
 	int i;
 	fprintf(STREAM, "\t.data\n");
@@ -672,19 +678,19 @@
 {
         int i,j;
 	/*printf("\nTotal frame size = %d\nRegister storage = %d\nArguments = %d\nFrame size = %d\n",4*(registers_to_be_saved()+3)+cfun->args_size+get_frame_size(),registers_to_be_saved()+3,cfun->args_size,get_frame_size());*/
-        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(stack_pointer_rtx,0)),return_addr_rtx);
-        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(stack_pointer_rtx,-4)),stack_pointer_rtx);
-        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(stack_pointer_rtx,-8)),hard_frame_pointer_rtx);
-        emit_move_insn(hard_frame_pointer_rtx, plus_constant(stack_pointer_rtx,0));
+        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(SImode, stack_pointer_rtx,0)),return_addr_rtx);
+        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(SImode, stack_pointer_rtx,-4)),stack_pointer_rtx);
+        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(SImode, stack_pointer_rtx,-8)),hard_frame_pointer_rtx);
+        emit_move_insn(hard_frame_pointer_rtx, plus_constant(SImode, stack_pointer_rtx,0));
         for(i=0,j=3;i<FIRST_PSEUDO_REGISTER;i++)
         {
                 if(df_regs_ever_live_p(i) && !call_used_regs[i] && !fixed_regs[i])
                 {
-                        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(hard_frame_pointer_rtx,-4*j)), gen_rtx_REG(SImode,i));
+                        emit_move_insn(gen_rtx_MEM(SImode,plus_constant(SImode, hard_frame_pointer_rtx,-4*j)), gen_rtx_REG(SImode,i));
                         j++;
                 }
         }
-        emit_move_insn(stack_pointer_rtx, plus_constant(hard_frame_pointer_rtx,-((3+j)*4+get_frame_size())));
+        emit_move_insn(stack_pointer_rtx, plus_constant(SImode, hard_frame_pointer_rtx,-((3+j)*4+get_frame_size())));
 }
 
 void
@@ -700,16 +706,16 @@
         {
                 if(df_regs_ever_live_p(i) && !call_used_regs[i] && !fixed_regs[i])
                 {
-                        emit_move_insn(gen_rtx_REG(SImode,i), gen_rtx_MEM(SImode,plus_constant(hard_frame_pointer_rtx,-4*j)));
+                        emit_move_insn(gen_rtx_REG(SImode,i), gen_rtx_MEM(SImode,plus_constant(SImode, hard_frame_pointer_rtx,-4*j)));
                         j++;
                 }
         }
         /*Restore stack pointer*/
-        emit_move_insn(stack_pointer_rtx, plus_constant(hard_frame_pointer_rtx,0));
+        emit_move_insn(stack_pointer_rtx, plus_constant(SImode, hard_frame_pointer_rtx,0));
         /*Restore frame pointer*/
-        emit_move_insn(hard_frame_pointer_rtx, gen_rtx_MEM(SImode,plus_constant(stack_pointer_rtx,-8)));
+        emit_move_insn(hard_frame_pointer_rtx, gen_rtx_MEM(SImode,plus_constant(SImode, stack_pointer_rtx,-8)));
         /*Restore return address*/
-        emit_move_insn(return_addr_rtx, gen_rtx_MEM(SImode,plus_constant(stack_pointer_rtx,0)));
+        emit_move_insn(return_addr_rtx, gen_rtx_MEM(SImode,plus_constant(SImode, stack_pointer_rtx,0)));
         /*Jump instruction*/
         emit_jump_insn(gen_IITB_return());
 }
diff -u -r gcc-spim-diff/gcc/config/spim/spim.h gcc-4.8.2/gcc/config/spim/spim.h
--- gcc-spim-diff/gcc/config/spim/spim.h	2014-03-26 06:49:38.161510307 +0530
+++ gcc-4.8.2/gcc/config/spim/spim.h	2014-03-26 06:39:07.803113355 +0530
@@ -324,7 +324,9 @@
 reg_ok_for_index_p2(x) 
 #endif
 	
+#ifdef _M_USE_POISONED
 #define GO_IF_MODE_DEPENDENT_ADDRESS(addr,label) 
+#endif
 
 /* ------------------------------------------------------------------------------*
  * 			Assembly Output Format                                   *
diff -u -r gcc-spim-diff/gcc/config/spim/spim.md gcc-4.8.2/gcc/config/spim/spim.md
--- gcc-spim-diff/gcc/config/spim/spim.md	2014-03-26 06:49:45.241192776 +0530
+++ gcc-4.8.2/gcc/config/spim/spim.md	2014-03-26 06:42:17.057898316 +0530
@@ -2,11 +2,11 @@
 ;; arrays are generated in source files of the generated compiler in the
 ;; initial levels..
 
-;;(define_insn "dummy_pattern"
-;;        [(reg:SI 0)]
-;;        "1"
-;;        "This stmnt should not be emitted!"
-;;)
+(define_insn "dummy_pattern"
+        [(reg:SI 0)]
+        "1"
+        "This stmnt should not be emitted!"
+)
 
 ;; Functions in genemit.c read .md file for desired target and generates
 ;; gen_<insn-name> function  for each standard named  pattern defined in
diff -u -r gcc-spim-diff/gcc/config/spim/spim-protos.h gcc-4.8.2/gcc/config/spim/spim-protos.h
--- gcc-spim-diff/gcc/config/spim/spim-protos.h	2014-03-26 06:49:26.615361427 +0530
+++ gcc-4.8.2/gcc/config/spim/spim-protos.h	2014-03-26 06:39:07.806446537 +0530
@@ -1,3 +1,4 @@
+#include "target.h"
 int is_index_reg PARAMS((int REGN));
 int  is_base_reg PARAMS((int REGN));
 int is_arg_reg PARAMS((int REGN));
@@ -7,7 +8,7 @@
 int is_caller_saved_reg PARAMS((int REGN));
 int is_callee_saved_reg PARAMS((int REGN));
 int is_general_reg PARAMS((int REGN));
-void spim_asm_internal_label PARAMS((FILE *stream, const char *prefix, unsigned int labelno));
+void spim_asm_internal_label PARAMS((FILE *stream, const char *prefix, long unsigned int labelno));
 void spim_asm_globalize_label PARAMS((FILE *stream, const char *name));
 rtx spim_struct_value_rtx PARAMS((tree fndecl, int incoming));
 int hard_regno_mode_ok  PARAMS((int REGN, enum machine_mode MODE));
@@ -35,9 +36,9 @@
 void asm_output_skip PARAMS((FILE  *STREAM,int NBYTES));
 void print_operand PARAMS((FILE *STREAM,rtx X,char CODE));
 void print_operand_address PARAMS((FILE *STREAM,rtx X));
-void asm_generate_internal_label PARAMS((char *STRING,char *PREFIX,int NUM));
-void asm_output_local PARAMS((FILE *STREAM,char *NAME,int SIZE,int ROUNDED));
-void asm_output_common PARAMS((FILE *STREAM,char *NAME,int SIZE,int ROUNDED));
+void asm_generate_internal_label PARAMS((char *STRING,const char *PREFIX,int NUM));
+void asm_output_local PARAMS((FILE *STREAM,const char *NAME,int SIZE,int ROUNDED));
+void asm_output_common PARAMS((FILE *STREAM,const char *NAME,int SIZE,int ROUNDED));
 int asm_output_symbol_ref PARAMS((FILE *stream, rtx sym));
 void function_profiler PARAMS((FILE*asm_file,int labelno));
 void initialize_trampoline PARAMS((void));


Analyzing function: main/0

Analyzing function body size: main

Inline summary for main/0
  self time:       58
  global time:     0
  self size:       23
  global size:     0
  self stack:      0
  global stack:    0
    size:9.000000, time:10.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:
    printf/3 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    is_odd(int)/2 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0


Reclaiming functions:
Inline summary for main/0
  self time:       58
  global time:     58
  self size:       23
  global size:     23
  self stack:      0
  global stack:    0
    size:9.000000, time:10.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:
    printf/3 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    is_odd(int)/2 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0


Flattening functions:

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls of main/0.
Unit growth for small function inlining: 23->23 (0%)

Reclaiming functions:

Inlined 0 calls, eliminated 0 functions

Inline summary for main/0
  self time:       58
  global time:     58
  self size:       23
  global size:     23
  self stack:      0
  global stack:    0
    size:9.000000, time:10.000000, predicate:(true)
    size:2.000000, time:0.000000, predicate:(not inlined)
  calls:
    printf/3 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    is_odd(int)/2 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    foo(int)/1 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0


Reclaiming functions:
callgraph:

printf/3 @0x2af53ea02c60 availability:not_available reachable
  called by: main/0 (1.00 per call) (can throw external) 
  calls: 
  References: 
  Refering this function: 
is_odd(int)/2 @0x2af53ea02b40 (asm: _Z6is_oddi) availability:not_available reachable
  called by: main/0 (1.00 per call) (can throw external) 
  calls: 
  References: 
  Refering this function: 
foo(int)/1 @0x2af53ea02a20 (asm: _Z3fooi) availability:not_available reachable
  called by: main/0 (1.00 per call) (can throw external) main/0 (1.00 per call) (can throw external) 
  calls: 
  References: 
  Refering this function: 
main/0 @0x2af53ea02900 (asm: main) availability:available analyzed needed reachable body externally_visible finalized
  called by: 
  calls: printf/3 (1.00 per call) (can throw external) foo(int)/1 (1.00 per call) (can throw external) is_odd(int)/2 (1.00 per call) (can throw external) foo(int)/1 (1.00 per call) (can throw external) 
  References: 
  Refering this function: 
main ()
{
  int D.2723;
  int D.2722;
  int D.2721;
  int i;
  int a;
  int j;
  int n;
  int D.2719;
  int D.2718;
  int D.2714;
  bool retval.0;
  bool D.2711;

<bb 2>:
  n_5 = 10;
  j_6 = 3;
  i_7 = 0;
  goto <bb 7>;

<bb 3>:
  D.2721_10 = foo (j_1);
  j_11 = D.2721_10;
  D.2722_12 = is_odd (j_11);
  D.2714_13 = D.2722_12;
  retval.0_14 = D.2714_13 != 0;
  if (retval.0_14 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  a_15 = j_11;
  goto <bb 6>;

<bb 5>:
  D.2718_16 = j_11 % 3;
  D.2723_17 = foo (D.2718_16);
  a_18 = D.2723_17;

<bb 6>:
  # a_2 = PHI <a_15(4), a_18(5)>
  i_19 = i_4 + 1;

<bb 7>:
  # j_1 = PHI <j_6(2), j_11(6)>
  # a_3 = PHI <a_8(D)(2), a_2(6)>
  # i_4 = PHI <i_7(2), i_19(6)>
  D.2711_9 = i_4 < n_5;
  if (D.2711_9 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 8>:
  printf ("%d\n", a_3);
  D.2719_20 = a_3;

<L6>:
  return D.2719_20;

}



;; Function main (main, funcdef_no=0, decl_uid=2701, cgraph_uid=0)

main ()
{
  int D.2723;
  int D.2722;
  int D.2721;
  int i;
  int a;
  int j;
  int n;
  int D.2719;
  int D.2718;
  int D.2714;
  bool retval.0;
  bool D.2711;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  n_5 = 10;
  j_6 = 3;
  i_7 = 0;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 3
  # PRED: 7 (true)
  D.2721_10 = foo (j_1);
  j_11 = D.2721_10;
  D.2722_12 = is_odd (j_11);
  D.2714_13 = D.2722_12;
  retval.0_14 = D.2714_13 != 0;
  if (retval.0_14 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  a_15 = j_11;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 3 (false)
  D.2718_16 = j_11 % 3;
  D.2723_17 = foo (D.2718_16);
  a_18 = D.2723_17;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (fallthru) 5 (fallthru)
  # a_2 = PHI <a_15(4), a_18(5)>
  i_19 = i_4 + 1;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 2 (fallthru) 6 (fallthru)
  # j_1 = PHI <j_6(2), j_11(6)>
  # a_3 = PHI <a_8(D)(2), a_2(6)>
  # i_4 = PHI <i_7(2), i_19(6)>
  D.2711_9 = i_4 < n_5;
  if (D.2711_9 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;
  # SUCC: 3 (true) 8 (false)

  # BLOCK 8
  # PRED: 7 (false)
  printf ("%d\n", a_3);
  D.2719_20 = a_3;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 8 (fallthru)
<L6>:
  return D.2719_20;
  # SUCC: EXIT

}


main ()
{
  int D.2723;
  int D.2722;
  int D.2721;
  int i;
  int a;
  int j;
  int n;
  int D.2719;
  int D.2718;
  int D.2714;
  bool retval.0;
  bool D.2711;

<bb 2>:
  n_5 = 10;
  j_6 = 3;
  i_7 = 0;
  goto <bb 7>;

<bb 3>:
  D.2721_10 = foo (j_1);
  j_11 = D.2721_10;
  D.2722_12 = is_odd (j_11);
  D.2714_13 = D.2722_12;
  retval.0_14 = D.2714_13 != 0;
  if (retval.0_14 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  a_15 = j_11;
  goto <bb 6>;

<bb 5>:
  D.2718_16 = j_11 % 3;
  D.2723_17 = foo (D.2718_16);
  a_18 = D.2723_17;

<bb 6>:
  # a_2 = PHI <a_15(4), a_18(5)>
  i_19 = i_4 + 1;

<bb 7>:
  # j_1 = PHI <j_6(2), j_11(6)>
  # a_3 = PHI <a_8(D)(2), a_2(6)>
  # i_4 = PHI <i_7(2), i_19(6)>
  D.2711_9 = i_4 < n_5;
  if (D.2711_9 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 8>:
  printf ("%d\n", a_3);
  D.2719_20 = a_3;

<L6>:
  return D.2719_20;

}



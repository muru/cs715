{:
//Pattern#1

:}

{:
//Pattern#2
:}
list noname.constants
  [(R0_REGNUM, 0),
   (R1_REGNUM, 1),
   (IP_REGNUM, 12),
   (SP_REGNUM, 13),
   (LR_REGNUM, 14),
   (PC_REGNUM, 15),
   (LAST_ARM_REGNUM, 15),
   (CC_REGNUM, 100),
   (VFPCC_REGNUM, 101)
  ]
  
{:
//Pattern#3
:}
list noname.constants
  [(DOM_CC_X_AND_Y, 0),
   (DOM_CC_NX_OR_Y, 1),
   (DOM_CC_X_OR_Y, 2)
  ]

{:
//Pattern#4
:}
list noname.constants
  [(CMP_CMP, 0),
   (CMN_CMP, 1),
   (CMP_CMN, 2),
   (CMN_CMN, 3),
   (NUM_OF_COND_CMP, 4)
  ]
{:
(include"arm-tune.md")
:}

{:
//Pattern#5
:}
concrete is_thumb.attr instantiates const
{
	root (symbol_ref:"thumb_code");
	lov:="no,yes";
}

{:
//Pattern#6
:}
concrete is_arch6.attr instantiates const
{
	root (symbol_ref:"arm_arch6");
	lov:="no,yes";
}

{:
//Pattern#7
:}
concrete is_thumb1.attr instantiates const
{
	root (symbol_ref:"thumb1_code");
	lov:="no,yes";
}

{:
//Pattern#8
:}
concrete shift.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#9
:}
concrete fpu.attr instantiates const
{
	root (symbol_ref:"arm_fpu_attr");
	lov:="none,vfp";
}

{:
//Pattern#10
:}
concrete length.attr instantiates sequence
{
	root (const_int:4);
	lov:="";
}

{:
//Pattern#11
:}
concrete arch.attr instantiates sequence
{
	root (const_string:"any");
	lov:="any,a,t,32,t1,t2,v6,nov6,onlya8,neon_onlya8,nota8,neon_nota8,iwmmxt,iwmmxt2";
}

//to do
{:
//Pattern#12 
:}
concrete arch_enabled.attr instantiates sequence
{
	root (const_int:4);
	lov:="";
}

{:
//Pattern#13
:}
concrete opt.attr instantiates sequence
{
	root (const_string:"any");
	lov:="any,speed,size";
}

//to do
{:
//Pattern#14
:}
concrete opt_enabled.attr instantiates sequence
{
	root (const_string:"any");
	lov:="any,speed,size";
}

{:
//Pattern#15
:}
concrete insn_enabled.attr instantiates sequence
{
	root (const_string:"yes");
	lov:="no,yes";
}

//to do
{:
//Pattern#16
:}
concrete enabled.attr instantiates sequence
{
	root (const_string:"any");
	lov:="any,speed,size";
}

{:
//Pattern#17
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#18
:}
concrete thumb2_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#19
:}
concrete arm_neg_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#20
:}
concrete thumb2_neg_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

//to do
{:
//Pattern#21 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

//to do
{:
//Pattern#22
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

//to do
{:
//Pattern#23 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

//to do
{:
//Pattern#24 
:}
concrete INSN.attr instantiates sequence
{
	root (const_string:"other");
	lov:="mov,mvn,smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals,smlawy,smuad,smuadx,smlad,smladx,smusd,smusdx,smlsd,smlsdx,smmul,smmulr,smmla,umaal,smlald,smlsld,clz,mrs,msr,xtab,sdiv,udiv,sat,other";
}

//to do
{:
//Pattern#25 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


//to do
{:
//Pattern#26 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


{:
//Pattern#27
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

concrete wtype.attr instantiates sequence
{
	root (const_string:"none");
	lov:="none,wor,wxor,wand,wandn,wmov,tmcrr,tmrrc,wldr,wstr,tmcr,tmrc,wadd,wsub,wmul,wmac,wavg2,tinsr,textrm,wshufh,wcmpeq,wcmpgt,wmax,wmin,wpack,wunpckih,wunpckil,wunpckeh,wunpckel,wror,wsra,wsrl,wsll,wmadd,tmia,tmiaph,tmiaxy,tbcst,tmovmsk,wacc,waligni,walignr,tandc,textrc,torc,torvsc,wsad,wabs,wabsdiff,waddsubhx,wsubaddhx,wavg4,wmulw,wqmulm,wqmulwm,waddbhus,wqmiaxy,wmiaxy,wmiawxy,wmerge";
}

{:
//Pattern#28
:}
concrete ldsched.attr instantiates const 
{
	root (symbol_ref:"arm_ld_sched");
	lov:="no,yes"; 
}

{:
//Pattern#29
:}
concrete wtype.attr instantiates sequence
{
	root (const_string:"none");
	lov:="neon_int_1,neon_int_2,neon_int_3,neon_int_4,neon_int_5,neon_vqneg_vqabs,neon_vmov,neon_vaba,neon_vsma,neon_vaba_qqq,neon_mul_ddd_8_16_qdd_16_8_long_32_16_long,neon_mul_qqq_8_16_32_ddd_32,neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_long_scalar,neon_mla_ddd_8_16_qdd_16_8_long_32_16_long,neon_mla_qqq_8_16,neon_mla_ddd_32_qqd_16_ddd_32_scalar_qdd_64_32_long_scalar_qdd_64_32_long,neon_mla_qqq_32_qqd_32_scalar,neon_mul_ddd_16_scalar_32_16_long_scalar,neon_mul_qqd_32_scalar,neon_mla_ddd_16_scalar_qdd_32_16_long_scalar,neon_shift_1,neon_shift_2,neon_shift_3,neon_vshl_ddd,neon_vqshl_vrshl_vqrshl_qqq,neon_vsra_vrsra,neon_fp_vadd_ddd_vabs_dd,neon_fp_vadd_qqq_vabs_qq,neon_fp_vsum,neon_fp_vmul_ddd,neon_fp_vmul_qqd,neon_fp_vmla_ddd,neon_fp_vmla_qqq,neon_fp_vmla_ddd_scalar,neon_fp_vmla_qqq_scalar,neon_fp_vrecps_vrsqrts_ddd,neon_fp_vrecps_vrsqrts_qqq,neon_bp_simple,neon_bp_2cycle,neon_bp_3cycle,neon_ldr,neon_str,neon_vld1_1_2_regs,neon_vld1_3_4_regs,neon_vld2_2_regs_vld1_vld2_all_lanes,neon_vld2_4_regs,neon_vld3_vld4,neon_vst1_1_2_regs_vst2_2_regs,neon_vst1_3_4_regs,neon_vst2_4_regs_vst3_vst4,neon_vst3_vst4,neon_vld1_vld2_lane,neon_vld3_vld4_lane,neon_vst1_vst2_lane,neon_vst3_vst4_lane,neon_vld3_vld4_all_lanes,neon_mcr,neon_mcr_2_mcrr,neon_mrc,neon_mrrc,neon_ldm_2,neon_stm_2,none";
}

//to do
{:
//Pattern#30
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


{:
//Pattern#31
:}
concrete predicable.attr instantiates sequence
{
	root (const_string:"no");
	lov:="no,yes"; 
}


{:
//Pattern#32
:}
concrete model_wbuf.attr instantiates const 
{
	root (symbol_ref:"arm_tune_wbuf");
	lov:="no,yes"; 
}

//to do
{:
//Pattern#33 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}



//to do
{:
//Pattern#34 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


{:
//Pattern#35
:}
concrete far_jump.attr instantiates sequence 
{
	root (const_int:1);
	lov:=""; 
}

{:
//Pattern#36
:}
concrete ce_count.attr instantiates sequence
{
	root (const_int:1);
	lov:=""; 
}

//to do
{:
//Pattern#37 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


//to do
{:
//Pattern#38 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


//to do
{:
//Pattern#39 
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


//to do
{:
//Pattern#40 
:}
abstract parallel_set_plus2_clobber extends parallel {
	root.1:=set_plus2; root.2:=clobber;
}
concrete adddi3.insn instantiates parallel_set_plus2_clobber {
	root (s_register_operand:DI:"", s_register_operand:DI:"",
		arm_adddi_operand:DI:"",reg(CC:CC_REGNUM));
}
{:
  "TARGET_EITHER"
  "
  if (TARGET_THUMB1)
    {
      if (!REG_P (operands[1]))
        operands[1] = force_reg (DImode, operands[1]);
      if (!REG_P (operands[2]))
        operands[2] = force_reg (DImode, operands[2]);
     }
  "
:}

{:
//Pattern#41
:}
abstract set_plus2_clobber extends sequence 
{
	root.1:=set_plus2; root.2:=clobber;
}
abstract set_minus2_clobber extends sequence 
{
	root.1:=set_minus2; root.2:=clobber;
}
concrete *thumb1_adddi3.insn instantiates set_plus2_clobber 
{
	root (register_operand:DI:"=l", register_operand:DI:"%0",
		register_operand:DI:"l",reg(CC:CC_REGNUM));
	root.1.2.mode:=DI;
}
{:
  "TARGET_THUMB1"
  "add\\t%Q0, %Q0, %Q2\;adc\\t%R0, %R0, %R2"
  [(set_attr "length" "4")]
:}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}


{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#42
:}
concrete arm_pool_range.attr instantiates sequence
{
	root (const_int:0);
	lov:="";
}

{:
//Pattern#69
:}
concrete *arm_subdi3.insn instantiates set_minus2_clobber 
{
	root (s_register_operand:DI:"=&r,&r,&r", s_register_operand:DI:"0,r,0",
		s_register_operand:DI:"r,0,0",reg(CC:CC_REGNUM));
	root.1.2.mode:=DI;
}
{:
  "TARGET_32BIT && !TARGET_NEON"
  "subs\\t%Q0, %Q1, %Q2\;sbc\\t%R0, %R1, %R2"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#70
:}
concrete *thumb_subdi3.insn instantiates set_minus2_clobber 
{
	root (register_operand:DI:"=l", register_operand:DI:"0",
		register_operand:DI:"l",reg(CC:CC_REGNUM));
	root.1.2.mode:=DI;
}
{:
  "TARGET_THUMB1"
  "sub\\t%Q0, %Q0, %Q2\;sbc\\t%R0, %R0, %R2"
  [(set_attr "length" "4")]
:}

{:
//Pattern#71
:}
abstract set_minus_2zero_extend_clobber extends sequence
{
	root.1:=set_minus2;
	root.1.2.2:=zero_extend;
	root.2:=clobber;
}
concrete *subdi_di_zesidi.insn instantiates set_minus_2zero_extend_clobber
{
	root (s_register_operand:DI:"=&r,&r", s_register_operand:DI:"0,r",
		s_register_operand:DI:"r,r", reg(CC:CC_REGNUM));
	root.1.1.mode:=DI;
	root.1.2.mode:=DI;
	root.1.2.2.mode:=DI;
	root.1.2.2.1.mode:=SI;
}
{:
  "TARGET_32BIT"
  "subs\\t%Q0, %Q1, %2\;sbc\\t%R0, %R1, #0"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#72
:}
abstract set_minus_sign_extend_clobber extends sequence
{
	root.1:=set_minus2;
	root.1.2.2:=sign_extend;
	root.2:=clobber;
}
concrete *subdi_di_sesidi.insn instantiates set_minus_sign_extend_clobber
{
	root (s_register_operand:DI:"=&r,&r", s_register_operand:DI:"0,r",
		s_register_operand:DI:"r,r", reg(CC:CC_REGNUM));
	root.1.1.mode:=DI;
	root.1.2.mode:=DI;
	root.1.2.2.mode:=DI;
	root.1.2.2.1.mode:=SI;
}
{:
  "TARGET_32BIT"
  "subs\\t%Q0, %Q1, %2\;sbc\\t%R0, %R1, %2, asr #31"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#73
:}
abstract set_minus_1zero_extend_clobber extends sequence
{
	root.1:=set_minus2;
	root.1.2.1:=zero_extend;
	root.2:=clobber;
}
concrete *subdi_zesidi_di.insn instantiates set_minus_1zero_extend_clobber
{
	root (s_register_operand:DI:"=&r,&r", 2=s_register_operand:DI:"r,r",
		1=s_register_operand:DI:"0,r", reg(CC:CC_REGNUM));
	root.1.1.mode:=DI;
	root.1.2.mode:=DI;
	root.1.2.1.mode:=DI;
	root.1.2.1.1.mode:=SI;
}
{:
  "TARGET_ARM"
  "rsbs\\t%Q0, %Q1, %2\;rsc\\t%R0, %R1, #0"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#74
:}
abstract set_minus_1sign_extend_clobber extends sequence
{
	root.1:=set_minus2;
	root.1.2.1:=sign_extend;
	root.2:=clobber;
}
concrete *subdi_sesidi_di.insn instantiates set_minus_1sign_extend_clobber
{
	root (s_register_operand:DI:"=&r,&r", 2=s_register_operand:DI:"r,r",
		1=s_register_operand:DI:"0,r", reg(CC:CC_REGNUM));
	root.1.1.mode:=DI;
	root.1.2.mode:=DI;
	root.1.2.1.mode:=DI;
	root.1.2.1.1.mode:=SI;
}
{:
  "TARGET_ARM"
  "rsbs\\t%Q0, %Q1, %2\;rsc\\t%R0, %R1, %2, asr #31"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#75
:}
abstract set_minus_1zero_extend_2zero_extend_clobber extends sequence
{
	root.1:=set_minus2;
	root.1.2.1:=zero_extend;
	root.1.2.2:=zero_extend;
	root.2:=clobber;
}
concrete *subdi_zesidi_zesidi.insn instantiates set_minus_1zero_extend_2zero_extend_clobber
{
	root (s_register_operand:DI:"=r", s_register_operand:DI:"r",
		s_register_operand:DI:"r", reg(CC:CC_REGNUM));
	root.1.1.mode:=DI;
	root.1.2.mode:=DI;
	root.1.2.1.mode:=DI;
	root.1.2.1.1.mode:=SI;
	root.1.2.mode:=DI;
	root.1.2.2.mode:=DI;
	root.1.2.2.1.mode:=SI;
}
{:
  "TARGET_32BIT"
  "subs\\t%Q0, %1, %2\;sbc\\t%R0, %1, %1"
  [(set_attr "conds" "clob")
   (set_attr "length" "8")]
:}

{:
//Pattern#76
:}
concrete subsi3.exp instantiates set_minus2
{
	root (s_register_operand:SI:"", reg_or_int_operand:SI:"",
		s_register_operand:SI:"");
	root.1.mode:=SI;
	root.2.mode:=SI;
}
{: 
  "TARGET_EITHER"
  "
  if (CONST_INT_P (operands[1]))
    {
      if (TARGET_32BIT)
        {
          arm_split_constant (MINUS, SImode, NULL_RTX,
	                      INTVAL (operands[1]), operands[0],
	  		      operands[2], optimize && can_create_pseudo_p ());
          DONE;
	}
      else /* TARGET_THUMB1 */
        operands[1] = force_reg (SImode, operands[1]);
    }
  "
:}

{:
//Pattern#77
:}
concrete thumb1_subsi3_insn.insn instantiates set_minus2
{
	root (register_operand:SI:"=l", register_operand:SI:"l",
		reg_or_int_operand:SI:"lPd");
	root.1.mode:=SI;
	root.2.mode:=SI;
}
{:
  "TARGET_THUMB1"
  "sub\\t%0, %1, %2"
  [(set_attr "length" "2")
   (set_attr "conds" "set")]
:}

{:
//Pattern#78
:}
concrete *arm_subsi3_insn.insn_and_split instantiates.in set_minus2
{
	root (s_register_operand:SI:"=r,r,r,rk,r", reg_or_int_operand:SI:"rI,r,r,k,?n",
		reg_or_int_operand:SI:"r,I,r,r, r");
	root.1.mode:=SI;
	root.2.mode:=SI;
}
cmd_spec.in
{:
  "TARGET_32BIT"
  "@
   rsb%?\\t%0, %2, %1
   sub%?\\t%0, %1, %2
   sub%?\\t%0, %1, %2
   sub%?\\t%0, %1, %2
   #"
  "&& (CONST_INT_P (operands[1])
       && !const_ok_for_arm (INTVAL (operands[1])))"
:}
instantiates.out clobber
{
  root (const_int:0);
}
cmd_spec.out
{:
  "
  arm_split_constant (MINUS, SImode, curr_insn,
                      INTVAL (operands[1]), operands[0], operands[2], 0);
  DONE;
  "
  [(set_attr "length" "4,4,4,4,16")
   (set_attr "predicable" "yes")
   (set_attr "type"  "*,simple_alu_imm,*,*,*")]
:}

{:
//Pattern#79
:}
abstract match_set_minus2 extends sequence
{
	root.1:=sequence;
	root.1.2:=set_minus2;
}
abstract set_dup_dup_minus extends sequence
{
	root.1:=set;
	root.2:=set;
	root.2.2:=minus;
}
concrete .peep2 instantiates.in match_set_minus2
{
	root (3=SI:"r", arm_general_register_operand:SI:"", const_int_operand:SI:"",
		arm_general_register_operand:SI:"");
	root.1.2.2.mode:=SI;
}
cmd_spec.in
{:
  "TARGET_32BIT
   && !const_ok_for_arm (INTVAL (operands[1]))
   && const_ok_for_arm (~INTVAL (operands[1]))"
:}
instantiates.out set_dup_dup_minus
{
	root(duplicate 3, duplicate 1, duplicate 0, duplicate 3, duplicate 2);
	root.2.2.mode:=SI;
}
cmd_spec.out
{:
  ""
:}

{:
//Pattern#80
:}
abstract set_compare_minus_minus extends sequence
{
	root.1:=set_compare2_minus;
	root.2:=set_minus2;
}
concrete *subsi3_compare0.insn instantiates set_compare_minus_minus	
{
	root(reg(CC_NOOV:CC_REGNUM), 1=arm_rhs_operand:SI:"r,r,I", 2=arm_rhs_operand:SI:"I,r,r", const_int:0, 0=s_register_operand:SI:"=r,r,r",duplicate 1, duplicate 2);
	root.1.2.mode:=CC_NOOV;
	root.1.2.1.mode:=SI;
	root.2.2.mode:=SI;
}
{:
  "TARGET_32BIT"
  "@
   sub%.\\t%0, %1, %2
   sub%.\\t%0, %1, %2
   rsb%.\\t%0, %2, %1"
  [(set_attr "conds" "set")
   (set_attr "type"  "simple_alu_imm,*,*")]
:}

{:
//Pattern#81
:}
abstract set_compare_minus_minus extends sequence
{
	root.1:=set_compare2;
	root.2:=set_minus2;
}
concrete *subsi3_compare.insn instantiates set_compare_minus_minus	
{
	root(reg(CC:CC_REGNUM), 1=arm_rhs_operand:SI:"r,r,I", 2=arm_rhs_operand:SI:"I,r,r", 0=s_register_operand:SI:"=r,r,r",duplicate 1, duplicate 2);
	root.1.2.mode:=CC;
	root.1.2.1.mode:=SI;
	root.2.2.mode:=SI;
}
{:
  "TARGET_32BIT"
  "@
   sub%.\\t%0, %1, %2
   sub%.\\t%0, %1, %2
   rsb%.\\t%0, %2, %1"
  [(set_attr "conds" "set")
   (set_attr "type"  "simple_alu_imm,*,*")]
:}

{:
//Pattern#82
:}
abstract set_minus2_match_operator extends set_minus2
{
	root.2.2:=match_operator;
}
concrete decscc.exp instantiates  set_minus2_match_operator
{
	root(s_register_operand:SI:"=r,r",s_register_operand:SI:"0,?r",(arm_comparison_operator,cc_register:"",const_int:0));
}
{:
  "TARGET_32BIT"
  ""
:}

{:
//Pattern#83
:}
concrete *arm_decscc.insn instantiates  set_minus2_match_operator
{
	root(s_register_operand:SI:"=r,r",s_register_operand:SI:"0,?r",arm_comparison_operator,(cc_register:"",const_int:0));
}
{:
  "TARGET_ARM"
  "@
   sub%d2\\t%0, %1, #1
   mov%D2\\t%0, %1\;sub%d2\\t%0, %1, #1"
  [(set_attr "conds" "use")
   (set_attr "length" "*,8")
   (set_attr "type" "simple_alu_imm,*")]
:}

{:
//Pattern#84
:}
